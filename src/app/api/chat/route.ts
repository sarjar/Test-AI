// This endpoint triggers the AI Consultant workflow (general chat path)
// Input: { query: string }
// Output: { summary, topPicks, timestamp }

import { NextRequest, NextResponse } from "next/server";
import { runAgentWorkflow } from "@/agent/graph";
import { createClient } from "../../../../supabase/server";

export async function POST(request: NextRequest) {
  try {
    const supabase = await createClient();

    // Get the current user
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();

    if (authError || !user) {
      return NextResponse.json(
        { error: "Authentication required" },
        { status: 401 },
      );
    }

    // Get the query from the request body
    const { query } = await request.json();

    if (!query || typeof query !== "string") {
      return NextResponse.json({ error: "Query is required and must be a string" }, { status: 400 });
    }

    // Run the agent workflow (AI Consultant path)
    const result = await runAgentWorkflow(query);

    // Extract the relevant chat response
    const chatResponse = result?.report
      ? {
          summary: result.report.summary,
          topPicks: result.report.topPicks,
          timestamp: result.report.timestamp,
        }
      : null;

    // Store the chat history in Supabase (optional, only if summary exists)
    if (chatResponse && chatResponse.summary) {
      const { error: dbError } = await supabase.from("chat_history").insert({
        user_id: user.id,
        query: query,
        response: chatResponse.summary,
        created_at: new Date().toISOString(),
      });
      if (dbError) {
        console.error("Error saving chat history:", dbError);
      }
    }

    if (!chatResponse) {
      return NextResponse.json({ error: "No response generated by AI Consultant" }, { status: 500 });
    }

    return NextResponse.json(chatResponse);
  } catch (error) {
    console.error("Chat API error:", error);
    return NextResponse.json(
      {
        error: `Failed to process chat request: ${
          error instanceof Error ? error.message : "Unknown error"
        }`,
      },
      { status: 500 },
    );
  }
}
